name: Build and Push Docker Image

on:
  push:
    tags:
      - "*"

permissions:
  id-token: write
  contents: read

jobs:
  build:
    environment: development
    runs-on: ubuntu-latest
    # runs-on: codebuild-my-github-actions-runner-${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-skip-session-tagging: true
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.REPOSITORY }}
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.REPOSITORY }}
          IMAGE_TAG: ${{ github.ref_name }}
          EC2_IP: ${{ vars.EC2_IP }}
          EC2_USER: "ubuntu"
          CONTAINER_NAME: "my-go-simple-backend"
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_IP << 'EOF'
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REGISTRY
            docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            docker run -d -p 80:3000 --name $CONTAINER_NAME $REGISTRY/$REPOSITORY:$IMAGE_TAG
          EOF
